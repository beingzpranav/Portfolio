"use client";

import React, { useState, useEffect, useRef } from 'react';

interface AnimatedCodeIconsProps {
  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'center';
  size?: 'sm' | 'md' | 'lg';
  animated?: boolean;
  opacity?: number;
}

const AnimatedCodeIcons: React.FC<AnimatedCodeIconsProps> = ({
  position = 'top-right',
  size = 'md',
  animated = true,
  opacity = 0.15,
}) => {
  // State to track if we're on client side
  const [isClient, setIsClient] = useState(false);

  // Determine size class
  const sizeClass = {
    sm: 'w-32 h-32',
    md: 'w-64 h-64',
    lg: 'w-96 h-96',
  }[size];

  // Determine position class
  const positionClass = {
    'top-left': 'left-0 top-0',
    'top-right': 'right-0 top-0',
    'bottom-left': 'left-0 bottom-0',
    'bottom-right': 'right-0 bottom-0',
    'center': 'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2',
  }[position];

  // SVG icons
  const codeSvgs = [
    // Code brackets SVG
    {
      svg: (color: string) => (
        <svg viewBox="0 0 122.88 101.57" style={{ fill: color }}>
          <path d="M44.97,12.84h-17.2L0,49.37L27.77,85.9h17.2L17.2,49.37L44.97,12.84L44.97,12.84z M77.91,12.84h17.2l27.77,36.53 L95.11,85.9h-17.2l27.77-36.53L77.91,12.84L77.91,12.84z M70.17,0.04l5.96,1.39c0.94,0.22,1.52,1.16,1.31,2.1l-22.5,96.69 c-0.22,0.93-1.16,1.52-2.1,1.31l-5.95-1.39c-0.94-0.22-1.52-1.16-1.31-2.1l22.5-96.69C68.3,0.42,69.24-0.17,70.17,0.04L70.17,0.04 L70.17,0.04z" />
        </svg>
      ),
      color: '#0ea5e9',
      delay: 0.0,
      duration: 3.5,
      size: { width: 24, height: 24 },
    },
    // JS icon SVG
    {
      svg: (color: string) => (
        <svg viewBox="0 0 122.88 91.26" style={{ fill: color }}>
          <path className="st0" d="M8.32,0h106.24c4.58,0,8.32,3.74,8.32,8.32v74.62c0,4.57-3.74,8.32-8.32,8.32H8.32C3.74,91.26,0,87.51,0,82.94 V8.32C0,3.74,3.74,0,8.32,0L8.32,0z M43.7,64.74H32.8l-1.57,5.14H21.4l11.73-31.16h10.54l11.68,31.16H45.26L43.7,64.74L43.7,64.74z M41.67,58l-3.4-11.2L34.85,58H41.67L41.67,58z M59.15,38.72h16.02c3.49,0,6.1,0.83,7.84,2.49c1.73,1.66,2.6,4.03,2.6,7.09 c0,3.15-0.95,5.61-2.84,7.38c-1.89,1.78-4.79,2.66-8.68,2.66h-5.28v11.53h-9.66V38.72L59.15,38.72z M68.81,52.03h2.37 c1.87,0,3.18-0.33,3.94-0.97c0.75-0.65,1.13-1.47,1.13-2.48c0-0.98-0.33-1.81-0.99-2.49c-0.65-0.68-1.89-1.02-3.7-1.02h-2.76V52.03 L68.81,52.03z M91.82,38.72h9.66v31.16h-9.66V38.72L91.82,38.72z M117.97,23.29H5.29v60.46c0,0.64,0.25,1.2,0.67,1.63 c0.42,0.42,0.99,0.67,1.63,0.67h108.04c0.64,0,1.2-0.25,1.63-0.67c0.43-0.43,0.67-0.99,0.67-1.63V23.29H117.97L117.97,23.29z M106.64,9.35c2.27,0,4.11,1.84,4.11,4.11c0,2.27-1.84,4.11-4.11,4.11c-2.27,0-4.11-1.84-4.11-4.11 C102.54,11.19,104.38,9.35,106.64,9.35L106.64,9.35z M78.8,9.35c2.27,0,4.11,1.84,4.11,4.11c0,2.27-1.84,4.11-4.11,4.11 c-2.27,0-4.11-1.84-4.11-4.11C74.69,11.19,76.53,9.35,78.8,9.35L78.8,9.35z M92.72,9.35c2.27,0,4.11,1.84,4.11,4.11 c0,2.27-1.84,4.11-4.11,4.11c-2.27,0-4.11-1.84-4.11-4.11C88.61,11.19,90.45,9.35,92.72,9.35L92.72,9.35z" />
        </svg>
      ),
      color: '#22d3ee',
      delay: 0.5,
      duration: 4.0,
      size: { width: 30, height: 30 },
    },
    // More variations of code bracket SVG - rotated, scaled
    {
      svg: (color: string) => (
        <svg viewBox="0 0 122.88 101.57" style={{ fill: color }}>
          <path d="M44.97,12.84h-17.2L0,49.37L27.77,85.9h17.2L17.2,49.37L44.97,12.84L44.97,12.84z M77.91,12.84h17.2l27.77,36.53 L95.11,85.9h-17.2l27.77-36.53L77.91,12.84L77.91,12.84z M70.17,0.04l5.96,1.39c0.94,0.22,1.52,1.16,1.31,2.1l-22.5,96.69 c-0.22,0.93-1.16,1.52-2.1,1.31l-5.95-1.39c-0.94-0.22-1.52-1.16-1.31-2.1l22.5-96.69C68.3,0.42,69.24-0.17,70.17,0.04L70.17,0.04 L70.17,0.04z" />
        </svg>
      ),
      color: '#0ea5e9',
      delay: 1.0,
      duration: 4.5,
      size: { width: 32, height: 32 },
    },
    // More variations of JS SVG - rotated, scaled
    {
      svg: (color: string) => (
        <svg viewBox="0 0 122.88 91.26" style={{ fill: color }}>
          <path className="st0" d="M8.32,0h106.24c4.58,0,8.32,3.74,8.32,8.32v74.62c0,4.57-3.74,8.32-8.32,8.32H8.32C3.74,91.26,0,87.51,0,82.94 V8.32C0,3.74,3.74,0,8.32,0L8.32,0z M43.7,64.74H32.8l-1.57,5.14H21.4l11.73-31.16h10.54l11.68,31.16H45.26L43.7,64.74L43.7,64.74z M41.67,58l-3.4-11.2L34.85,58H41.67L41.67,58z M59.15,38.72h16.02c3.49,0,6.1,0.83,7.84,2.49c1.73,1.66,2.6,4.03,2.6,7.09 c0,3.15-0.95,5.61-2.84,7.38c-1.89,1.78-4.79,2.66-8.68,2.66h-5.28v11.53h-9.66V38.72L59.15,38.72z M68.81,52.03h2.37 c1.87,0,3.18-0.33,3.94-0.97c0.75-0.65,1.13-1.47,1.13-2.48c0-0.98-0.33-1.81-0.99-2.49c-0.65-0.68-1.89-1.02-3.7-1.02h-2.76V52.03 L68.81,52.03z M91.82,38.72h9.66v31.16h-9.66V38.72L91.82,38.72z M117.97,23.29H5.29v60.46c0,0.64,0.25,1.2,0.67,1.63 c0.42,0.42,0.99,0.67,1.63,0.67h108.04c0.64,0,1.2-0.25,1.63-0.67c0.43-0.43,0.67-0.99,0.67-1.63V23.29H117.97L117.97,23.29z M106.64,9.35c2.27,0,4.11,1.84,4.11,4.11c0,2.27-1.84,4.11-4.11,4.11c-2.27,0-4.11-1.84-4.11-4.11 C102.54,11.19,104.38,9.35,106.64,9.35L106.64,9.35z M78.8,9.35c2.27,0,4.11,1.84,4.11,4.11c0,2.27-1.84,4.11-4.11,4.11 c-2.27,0-4.11-1.84-4.11-4.11C74.69,11.19,76.53,9.35,78.8,9.35L78.8,9.35z M92.72,9.35c2.27,0,4.11,1.84,4.11,4.11 c0,2.27-1.84,4.11-4.11,4.11c-2.27,0-4.11-1.84-4.11-4.11C88.61,11.19,90.45,9.35,92.72,9.35L92.72,9.35z" />
        </svg>
      ),
      color: '#22d3ee',
      delay: 1.5,
      duration: 3.8,
      size: { width: 28, height: 28 },
    },
    // Additional SVG variations
    {
      svg: (color: string) => (
        <svg viewBox="0 0 122.88 101.57" style={{ fill: color }}>
          <path d="M44.97,12.84h-17.2L0,49.37L27.77,85.9h17.2L17.2,49.37L44.97,12.84L44.97,12.84z M77.91,12.84h17.2l27.77,36.53 L95.11,85.9h-17.2l27.77-36.53L77.91,12.84L77.91,12.84z M70.17,0.04l5.96,1.39c0.94,0.22,1.52,1.16,1.31,2.1l-22.5,96.69 c-0.22,0.93-1.16,1.52-2.1,1.31l-5.95-1.39c-0.94-0.22-1.52-1.16-1.31-2.1l22.5-96.69C68.3,0.42,69.24-0.17,70.17,0.04L70.17,0.04 L70.17,0.04z" />
        </svg>
      ),
      color: '#0ea5e9',
      delay: 2.0,
      duration: 4.2,
      size: { width: 26, height: 26 },
    },
    {
      svg: (color: string) => (
        <svg viewBox="0 0 122.88 91.26" style={{ fill: color }}>
          <path className="st0" d="M8.32,0h106.24c4.58,0,8.32,3.74,8.32,8.32v74.62c0,4.57-3.74,8.32-8.32,8.32H8.32C3.74,91.26,0,87.51,0,82.94 V8.32C0,3.74,3.74,0,8.32,0L8.32,0z M43.7,64.74H32.8l-1.57,5.14H21.4l11.73-31.16h10.54l11.68,31.16H45.26L43.7,64.74L43.7,64.74z M41.67,58l-3.4-11.2L34.85,58H41.67L41.67,58z M59.15,38.72h16.02c3.49,0,6.1,0.83,7.84,2.49c1.73,1.66,2.6,4.03,2.6,7.09 c0,3.15-0.95,5.61-2.84,7.38c-1.89,1.78-4.79,2.66-8.68,2.66h-5.28v11.53h-9.66V38.72L59.15,38.72z M68.81,52.03h2.37 c1.87,0,3.18-0.33,3.94-0.97c0.75-0.65,1.13-1.47,1.13-2.48c0-0.98-0.33-1.81-0.99-2.49c-0.65-0.68-1.89-1.02-3.7-1.02h-2.76V52.03 L68.81,52.03z M91.82,38.72h9.66v31.16h-9.66V38.72L91.82,38.72z M117.97,23.29H5.29v60.46c0,0.64,0.25,1.2,0.67,1.63 c0.42,0.42,0.99,0.67,1.63,0.67h108.04c0.64,0,1.2-0.25,1.63-0.67c0.43-0.43,0.67-0.99,0.67-1.63V23.29H117.97L117.97,23.29z M106.64,9.35c2.27,0,4.11,1.84,4.11,4.11c0,2.27-1.84,4.11-4.11,4.11c-2.27,0-4.11-1.84-4.11-4.11 C102.54,11.19,104.38,9.35,106.64,9.35L106.64,9.35z M78.8,9.35c2.27,0,4.11,1.84,4.11,4.11c0,2.27-1.84,4.11-4.11,4.11 c-2.27,0-4.11-1.84-4.11-4.11C74.69,11.19,76.53,9.35,78.8,9.35L78.8,9.35z M92.72,9.35c2.27,0,4.11,1.84,4.11,4.11 c0,2.27-1.84,4.11-4.11,4.11c-2.27,0-4.11-1.84-4.11-4.11C88.61,11.19,90.45,9.35,92.72,9.35L92.72,9.35z" />
        </svg>
      ),
      color: '#22d3ee',
      delay: 2.5,
      duration: 4.7,
      size: { width: 35, height: 35 },
    },
    {
      svg: (color: string) => (
        <svg viewBox="0 0 122.88 101.57" style={{ fill: color }}>
          <path d="M44.97,12.84h-17.2L0,49.37L27.77,85.9h17.2L17.2,49.37L44.97,12.84L44.97,12.84z M77.91,12.84h17.2l27.77,36.53 L95.11,85.9h-17.2l27.77-36.53L77.91,12.84L77.91,12.84z M70.17,0.04l5.96,1.39c0.94,0.22,1.52,1.16,1.31,2.1l-22.5,96.69 c-0.22,0.93-1.16,1.52-2.1,1.31l-5.95-1.39c-0.94-0.22-1.52-1.16-1.31-2.1l22.5-96.69C68.3,0.42,69.24-0.17,70.17,0.04L70.17,0.04 L70.17,0.04z" />
        </svg>
      ),
      color: '#0ea5e9',
      delay: 3.0,
      duration: 3.6,
      size: { width: 22, height: 22 },
    },
    {
      svg: (color: string) => (
        <svg viewBox="0 0 122.88 91.26" style={{ fill: color }}>
          <path className="st0" d="M8.32,0h106.24c4.58,0,8.32,3.74,8.32,8.32v74.62c0,4.57-3.74,8.32-8.32,8.32H8.32C3.74,91.26,0,87.51,0,82.94 V8.32C0,3.74,3.74,0,8.32,0L8.32,0z M43.7,64.74H32.8l-1.57,5.14H21.4l11.73-31.16h10.54l11.68,31.16H45.26L43.7,64.74L43.7,64.74z M41.67,58l-3.4-11.2L34.85,58H41.67L41.67,58z M59.15,38.72h16.02c3.49,0,6.1,0.83,7.84,2.49c1.73,1.66,2.6,4.03,2.6,7.09 c0,3.15-0.95,5.61-2.84,7.38c-1.89,1.78-4.79,2.66-8.68,2.66h-5.28v11.53h-9.66V38.72L59.15,38.72z M68.81,52.03h2.37 c1.87,0,3.18-0.33,3.94-0.97c0.75-0.65,1.13-1.47,1.13-2.48c0-0.98-0.33-1.81-0.99-2.49c-0.65-0.68-1.89-1.02-3.7-1.02h-2.76V52.03 L68.81,52.03z M91.82,38.72h9.66v31.16h-9.66V38.72L91.82,38.72z M117.97,23.29H5.29v60.46c0,0.64,0.25,1.2,0.67,1.63 c0.42,0.42,0.99,0.67,1.63,0.67h108.04c0.64,0,1.2-0.25,1.63-0.67c0.43-0.43,0.67-0.99,0.67-1.63V23.29H117.97L117.97,23.29z M106.64,9.35c2.27,0,4.11,1.84,4.11,4.11c0,2.27-1.84,4.11-4.11,4.11c-2.27,0-4.11-1.84-4.11-4.11 C102.54,11.19,104.38,9.35,106.64,9.35L106.64,9.35z M78.8,9.35c2.27,0,4.11,1.84,4.11,4.11c0,2.27-1.84,4.11-4.11,4.11 c-2.27,0-4.11-1.84-4.11-4.11C74.69,11.19,76.53,9.35,78.8,9.35L78.8,9.35z M92.72,9.35c2.27,0,4.11,1.84,4.11,4.11 c0,2.27-1.84,4.11-4.11,4.11c-2.27,0-4.11-1.84-4.11-4.11C88.61,11.19,90.45,9.35,92.72,9.35L92.72,9.35z" />
        </svg>
      ),
      color: '#22d3ee',
      delay: 3.5,
      duration: 3.9,
      size: { width: 25, height: 25 },
    },
  ];

  // Generate fixed positions for server-side rendering
  const fixedPositions = codeSvgs.map((_, i) => {
    return {
      left: 10 + (i * 5) % 70,
      top: 10 + (i * 7) % 70,
      rotation: (i * 3) % 10 - 5
    };
  });

  // Set isClient to true after mount
  useEffect(() => {
    setIsClient(true);
  }, []);

  return (
    <div 
      className={`absolute ${positionClass} ${sizeClass} pointer-events-none z-0 opacity-0 transition-opacity duration-500`}
      style={{ opacity: isClient ? opacity : 0 }}
    >
      <div className="relative w-full h-full">
        {codeSvgs.map((icon, i) => {
          // Use client-side random positions only after hydration
          let leftPos, topPos, rotation;
          
          if (isClient) {
            // Generate random positions on client-side only
            leftPos = Math.floor(Math.random() * 80);
            topPos = Math.floor(Math.random() * 80);
            rotation = Math.floor(Math.random() * 20 - 10);
          } else {
            // Use deterministic positions for SSR
            leftPos = fixedPositions[i].left;
            topPos = fixedPositions[i].top;
            rotation = fixedPositions[i].rotation;
          }
          
          return (
            <div
              key={i}
              className="absolute code-float"
              style={{
                left: `${leftPos}%`,
                top: `${topPos}%`,
                animationDelay: `${icon.delay}s`,
                animationDuration: `${icon.duration}s`,
                transform: `rotate(${rotation}deg)`,
                width: icon.size.width,
                height: icon.size.height,
              }}
            >
              {icon.svg(`${icon.color}80`)}
            </div>
          );
        })}
      </div>
      
      <style jsx>{`
        .code-float {
          animation: float ease-in-out infinite;
          filter: drop-shadow(0 0 5px rgba(14, 165, 233, 0.3));
        }
        
        @keyframes float {
          0%, 100% {
            transform: translateY(0) rotate(0deg);
            opacity: ${opacity};
          }
          25% {
            transform: translateY(-10px) rotate(-2deg);
            opacity: ${opacity * 1.5};
          }
          50% {
            transform: translateY(-20px) rotate(0deg);
            opacity: ${opacity * 2};
          }
          75% {
            transform: translateY(-10px) rotate(2deg);
            opacity: ${opacity * 1.5};
          }
        }
      `}</style>
    </div>
  );
};

export default AnimatedCodeIcons; 